/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package quanlynhasach;

import Helper.*;
import Models.*;
import java.awt.Component;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Chau Thinh
 */
public class frmSach extends javax.swing.JInternalFrame {

    Vector<String> header = new Vector<>();
    Vector data;
    ArrayList<LoaiSach> loaiSachs;
    Component component = this;

    /**
     * Creates new form frmSach
     */
    public frmSach() throws Exception {
        initComponents();
        header.clear();
        header.add("ID");
        header.add("Tiêu Đề");
        header.add("Tác Giả");
        header.add("Năm Xuất Bản");
        header.add("Thể Loại");
        header.add("Mô Tả");
        loadData();
        tableSach.setDefaultEditor(Object.class, null);
        tableSach.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                int row = tableSach.getSelectedRow();
                int col = tableSach.getSelectedColumn();
                if (row >= 0 && row < tableSach.getRowCount()) {
                    txtTieuDe.setText(tableSach.getValueAt(row, 1).toString());
                    txtTacGia.setText(tableSach.getValueAt(row, 2).toString());
                    txtNamXB.setText(tableSach.getValueAt(row, 3).toString());
                    int indexLS = 0;
                    for (LoaiSach ls : loaiSachs) {
                        if (ls.getLS_ID() == Integer.parseInt(tableSach.getValueAt(row, 4).toString())) {
                            break;
                        }
                        indexLS++;
                    }
                    cboTheLoai.setSelectedIndex(indexLS);
                    txtMoTa.setText(tableSach.getValueAt(row, 5).toString());
                }

                if (col == 0) {
                    tableSach.setColumnSelectionInterval(1, 1);
                    ControlHelper.getInstance().showMessageWarning(component, "Bạn không được chỉnh sửa cột này", "Cảnh báo");
                }
            }
        });
        txtNamXB.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    e.consume();
                }
            }

        });
    }

    private void loadData() throws Exception {
        if (data != null) {
            data.clear();
        }
        data = JDBCHelper.getInstance().ExecuteGetVector("select * from Sach", null, Sach.class);
        DefaultTableModel tbm = (DefaultTableModel) tableSach.getModel();
        tbm.setDataVector(data, header);
        loaiSachs = JDBCHelper.getInstance().Execute("select * from LoaiSach", null, LoaiSach.class);
        cboTheLoai.setModel(new javax.swing.DefaultComboBoxModel(loaiSachs.toArray(new LoaiSach[loaiSachs.size()])));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtTieuDe = new javax.swing.JTextField();
        txtTacGia = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cboTheLoai = new javax.swing.JComboBox<>();
        txtMoTa = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtNamXB = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnDong = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSach = new javax.swing.JTable();

        setMinimumSize(new java.awt.Dimension(530, 13));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin sách"));

        jLabel1.setText("Tiêu đề:");

        jLabel2.setText("Tác giả:");

        jLabel3.setText("Mô tả:");

        jLabel4.setText("Thể loại:");

        jLabel5.setText("Năm xuất bản:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(63, 63, 63)
                        .addComponent(txtTieuDe))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(65, 65, 65)
                        .addComponent(txtTacGia))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(61, 61, 61)
                        .addComponent(cboTheLoai, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMoTa, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNamXB, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtTieuDe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2))
                    .addComponent(txtTacGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel4))
                    .addComponent(cboTheLoai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel5))
                    .addComponent(txtNamXB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMoTa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 500, -1));

        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });
        jPanel2.add(btnThem);

        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });
        jPanel2.add(btnSua);

        btnXoa.setText("Xoá");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });
        jPanel2.add(btnXoa);

        btnDong.setText("Đóng");
        btnDong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDongActionPerformed(evt);
            }
        });
        jPanel2.add(btnDong);

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 518, -1));

        tableSach.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableSach.setShowGrid(true);
        jScrollPane1.setViewportView(tableSach);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 10, 470, 110));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        try {
            String tieuDe = txtTieuDe.getText();
            String tacGia = txtTacGia.getText();
            LoaiSach loaiSach = (LoaiSach) cboTheLoai.getSelectedItem();
            String namXB = txtNamXB.getText();
            String moTa = txtMoTa.getText();
            if (tieuDe.isEmpty()) {
                ControlHelper.getInstance().showMessageError(this, "Không được bỏ trống tiêu đề", "Thông báo");
                return;
            }
            if (tacGia.isEmpty()) {
                ControlHelper.getInstance().showMessageError(this, "Không được bỏ trống tác giả", "Thông báo");
                return;
            }
            if (namXB.isEmpty()) {
                ControlHelper.getInstance().showMessageError(this, "Không được bỏ trống năm xuất bản", "Thông báo");
                return;
            }
            if (!Utility.checkNumber(namXB)) {
                ControlHelper.getInstance().showMessageError(this, "Năm xuất bản không hợp lệ", "Thông báo");
                return;
            }
            if (loaiSach == null) {
                ControlHelper.getInstance().showMessageError(this, "Loại sách đang rỗng", "Thông báo");
                return;
            }
            if (moTa.isEmpty()) {
                ControlHelper.getInstance().showMessageError(this, "Không được bỏ trống mô tả", "Thông báo");
                return;
            }
            if (JDBCHelper.getInstance().ExecuteScalar("select count(*) from Sach where TieuDe = ?", new Object[]{tieuDe}) > 0) {
                ControlHelper.getInstance().showMessageError(this, "Sách này đã tồn tại", "Thông báo");
                return;
            }
            int id = Utility.getInstance().createID("select Max(S_ID) from Sach", null);
            int rowInsert = JDBCHelper.getInstance().ExecuteNonQuery("insert into Sach(S_ID, TieuDe, TacGia, NamXuatBan, TheLoai, MoTa) values(?, ?, ?, ?, ?, ?)", new Object[]{id, tieuDe, tacGia, namXB, loaiSach.getLS_ID(), moTa});
            if (rowInsert > 0) {
                clearTextField();
                Vector<String> vt = new Vector<>();
                vt.add(id + "");
                vt.add(tieuDe);
                vt.add(tacGia);
                vt.add(namXB);
                vt.add(loaiSach.getLS_ID() + "");
                vt.add(moTa);
                data.add(vt);
                tableSach.updateUI();
                ControlHelper.getInstance().showMessageInfomation(this, "Thêm thành công", "Thông báo");
            } else {
                ControlHelper.getInstance().showMessageError(this, "Thêm thất bại", "Thông báo");
            }
        } catch (Exception ex) {
            Logger.getLogger(frmLoaiSach.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        int posRow = tableSach.getSelectedRow();
        if (posRow < 0 || posRow >= tableSach.getRowCount()) {
            ControlHelper.getInstance().showMessageError(this, "Vui lòng chọn hàng cần sửa", "Cảnh báo");
        } else {
            try {
                String tieuDe = txtTieuDe.getText();
                String tacGia = txtTacGia.getText();
                LoaiSach loaiSach = (LoaiSach) cboTheLoai.getSelectedItem();
                String namXB = txtNamXB.getText();
                String moTa = txtMoTa.getText();
                int id = 0;
                try {
                    id = Integer.parseInt(tableSach.getValueAt(posRow, 0).toString());
                }
                catch(Exception ex) {
                    ControlHelper.getInstance().showMessageError(this, "Lỗi lấy mã sách", "Thông báo");
                    return;
                }
                if (tieuDe.isEmpty()) {
                    ControlHelper.getInstance().showMessageError(this, "Không được bỏ trống tiêu đề", "Thông báo");
                    return;
                }
                if (tacGia.isEmpty()) {
                    ControlHelper.getInstance().showMessageError(this, "Không được bỏ trống tác giả", "Thông báo");
                    return;
                }
                if (namXB.isEmpty()) {
                    ControlHelper.getInstance().showMessageError(this, "Không được bỏ trống năm xuất bản", "Thông báo");
                    return;
                }
                if (!Utility.checkNumber(namXB)) {
                    ControlHelper.getInstance().showMessageError(this, "Năm xuất bản không hợp lệ", "Thông báo");
                    return;
                }
                if (loaiSach == null) {
                    ControlHelper.getInstance().showMessageError(this, "Loại sách đang rỗng", "Thông báo");
                    return;
                }
                if (moTa.isEmpty()) {
                    ControlHelper.getInstance().showMessageError(this, "Không được bỏ trống mô tả", "Thông báo");
                    return;
                }
                if (JDBCHelper.getInstance().ExecuteScalar("select count(*) from Sach where TieuDe = ?", new Object[]{tieuDe}) > 0) {
                    ControlHelper.getInstance().showMessageError(this, "Sách này đã tồn tại", "Thông báo");
                    return;
                }
                int rowUpdate = JDBCHelper.getInstance().ExecuteNonQuery("update Sach set TieuDe = ?, TacGia = ?, NamXuatBan = ?, TheLoai = ?, MoTa = ? where S_ID = ?", new Object[]{tieuDe, tacGia, namXB, loaiSach.getLS_ID(), moTa, id});
                if (rowUpdate > 0) {
                    clearTextField();
                    loadData();
                    ControlHelper.getInstance().showMessageInfomation(this, "Cập nhật thành công", "Thông báo");
                } else {
                    ControlHelper.getInstance().showMessageError(this, "Cập nhật thất bại", "Thông báo");
                }
            } catch (Exception ex) {
                Logger.getLogger(frmLoaiSach.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        int posRow = tableSach.getSelectedRow();
        if (posRow < 0 || posRow >= tableSach.getRowCount()) {
            ControlHelper.getInstance().showMessageError(this, "Vui lòng chọn hàng cần xoá", "Cảnh báo");
        } else {
            try {
                TableModel tableModel = tableSach.getModel();
                if (ControlHelper.getInstance().confirmYN(this, "Bạn có chắc chắn xoá sách " + tableModel.getValueAt(posRow, 1) + " không?", "Cảnh báo")) {
                    int rowDelete = JDBCHelper.getInstance().ExecuteNonQuery("exec dbo.sp_deleteSach @id=?", new Object[]{tableModel.getValueAt(posRow, 0)});
                    if (rowDelete > 0) {
                        data.remove(posRow);
                        tableSach.updateUI();
                        clearTextField();
                        ControlHelper.getInstance().showMessageInfomation(this, "Xoá thành công", "Thông báo");
                    } else {
                        ControlHelper.getInstance().showMessageError(this, "Xoá thất bại", "Thông báo");
                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(frmLoaiSach.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnDongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDongActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnDongActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDong;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<Object> cboTheLoai;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableSach;
    private javax.swing.JTextField txtMoTa;
    private javax.swing.JTextField txtNamXB;
    private javax.swing.JTextField txtTacGia;
    private javax.swing.JTextField txtTieuDe;
    // End of variables declaration//GEN-END:variables

    private void clearTextField() {
        txtTieuDe.setText("");
        txtTacGia.setText("");
        txtNamXB.setText("");
        txtMoTa.setText("");
    }
}
